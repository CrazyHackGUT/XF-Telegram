<?php

/**
 * This file is a part of [Telegram] Core.
 * All rights reserved.
 *
 * Developed by SourceModders.
 */

namespace SModders\TelegramCore\ConnectedAccount\Provider;

use XF\ConnectedAccount\Provider\AbstractProvider;
use XF\Entity\ConnectedAccountProvider;
use XF\Mvc\Controller;

class Telegram extends AbstractProvider
{
    public function getOAuthServiceName()
    {
        return 'Telegram';
    }

    public function getDefaultOptions()
    {
        return [
            'token'     => '',
            'method'    => 'direct',
        ];
    }

    public function getOAuthConfig(ConnectedAccountProvider $provider, $redirectUri = null)
    {
        return [
            'name'      => $provider->options['name'],
            'token'     => $provider->options['token'],
            'method'    => $provider->options['method'],
        ];
    }
    
    public function handleAuthorization(Controller $controller, ConnectedAccountProvider $provider, $returnUrl)
    {
        
        // return parent::handleAuthorization($controller, $provider, $returnUrl); // TODO: Change the autogenerated stub
    }

    public function verifyConfig(array &$options, &$error = null)
    {
        if (empty($options['token']))
        {
            $options = [];
            return true;
        }
        
        $app = \XF::app();
        $api = $app['smodders.telegram']->api();
        // return parent::verifyConfig($options, $error); // TODO: Change the autogenerated stub
    }

    public function renderConfig(ConnectedAccountProvider $provider)
    {
        $app = \XF::app();
        $authMethods = [];

        /**
         * @var string $authMethodId
         * @var array $data
         */
        foreach ($app['smodders.telegram']['authMethods'] as $authMethodId => $data)
        {
            $authMethods[$authMethodId] = [
                'name'      => \XF::phraseDeferred($data['phrase']),
                'explain'   => \XF::phraseDeferred($data['phrase'] . '_explain'),
            ];
        }

        return $app->templater()->renderTemplate('admin:connected_account_provider_' . $provider->provider_id, [
            'options'       => $this->getEffectiveOptions($provider->options),
            'authMethods'   => $authMethods,
        ]);
    }
}